@startuml
skinparam classAttributeIconSize 0
skinparam roundcorner 0

class TreasureHunter{
}

class TreasureHunterGame{
 - Player player
 - Hook hook
 - Map map
 - ArrayList<Treasure> treasure
 + TreasureHunterGame()

}

class Coordinate{
 - int x
 - int y
 + Coordinate()
 + equals(Coordinate coords)
}

class Player{
 - String name
 - double balance
 + Player(Sring)
}

class Hook{
 - Coord position
 - int length
 - double fuel
 + Hook()
 + boolean collisionBorderMap(Map)
}

class Map{
 - int width
 - int depth
 + Map(int width, int depth)
}

abstract class Interactions{
 + void menu(TreasureHunterGame, Memento)
}

abstract class SaveAndLoadGame{
 + PlayerUpload()
 + HookUpload()
}

abstract class Sound{
 + playSound(String)
}

class Memento{
 - Player playerState
 - Hook hookState
 + Memento(Player, Hook)
}

class Treasure{
 - Enum TreasureType type
 - Coord position
 - int rarity
 - int weight
 - float price
 + Treasure(TreasureType, Coordinate, int, int, float)
}

class TreasureBuilder{
 - Enum TreasureType type
 - Coord position
 - int rarity
 - int weight
 - float price

}
interface Builder{
 + void setType(TreasureType)
 + void setPosition(Coordinate)
 + void setRarity()
 + void setWeight()
 + void setPrice()
}

enum TreasureType{

}

class Director{

 + void constructRandomTreasure(TreasureBuilder)
}

TreasureHunterGame *--> Player
TreasureHunterGame *--> Hook
TreasureHunterGame *--> Map
TreasureHunterGame *--> Treasure
TreasureHunterGame ..> Director
TreasureHunterGame ..> TreasureBuilder
TreasureHunterGame ..> Sound
TreasureHunterGame --|> Interactions
TreasureHunterGame ..> Memento

Director ..> TreasureBuilder

Hook *--> Coordinate
Hook ..> Map

Memento *--> Player
Memento *--> Hook
Memento --|> SaveAndLoadGame

Treasure --> TreasureType
Treasure *--> Coordinate

TreasureBuilder ..|> Builder
TreasureBuilder --> TreasureType
TreasureBuilder *--> Coordinate

TreasureHunter --|> Interactions
TreasureHunter --> TreasureHunterGame
TreasureHunter --> Memento


@enduml